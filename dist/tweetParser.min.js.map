{"version":3,"sources":["tweetParser.js"],"names":["exports","REGEX_URL","REGEX_USER","REGEX_HASHTAG","DEFAULT_OPTIONS","urlClass","userClass","hashtagClass","target","searchWithHashtags","parseUsers","parseHashtags","parseUrls","baseURL","hideUserSymbol","hideProtocol","generateLink","url","className","text","link","document","createElement","href","classList","add","textContent","tweetParser","element","options","arguments","length","undefined","elements","querySelectorAll","parameters","out","_len","args","Array","_key","forEach","arg","Object","keys","key","extend","hashtagBaseURL","concat","el","content","innerHTML","replace","displayUrl","outerHTML","user","userOnly","slice","displayUser","hashtag","hashtagOnly","encodeURIComponent","window","jQuery","$","fn","tweetParserify","this","selector"],"mappings":"AAAA;;;;;;;IAQC,SAAUA,GAIP,IAAMC,EAAY,0DACZC,EAAa,sBACbC,EAAgB,kCAGhBC,EAAkB,CACpBC,SAAU,aACVC,UAAW,aACXC,aAAc,UACdC,OAAQ,SACRC,oBAAoB,EACpBC,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,QAAS,gBACTC,gBAAgB,EAChBC,cAAc,GAgBZC,EAAe,SAACC,EAAKC,EAAWV,EAAQW,GAC1C,IAAMC,EAAOC,SAASC,cAAc,KAKpC,OAJAF,EAAKG,KAAON,EACZG,EAAKI,UAAUC,IAAIP,GACnBE,EAAKZ,OAASA,EACdY,EAAKM,YAAcP,EACZC,CACX,EAoDApB,EAAQ2B,YAjDY,SAACC,GAA0B,IAAjBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/BG,EAAWZ,SAASa,iBAAiBN,GACrCO,EAxBK,WAAS,IAAc,IAAtBC,EAAGN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAACO,EAAAP,UAAAC,OAAKO,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,EAAA,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAAV,UAAAU,GAQ7B,OAPAF,EAAKG,SAAQ,SAAAC,GACLA,GACAC,OAAOC,KAAKF,GAAKD,SAAQ,SAAAI,GACrBT,EAAIS,GAAOH,EAAIG,EACnB,GAER,IACOT,CACX,CAeuBU,CAAO,CAAC,EAAG1C,EAAiByB,GAGzCkB,EAAiBZ,EAAW1B,mBAAkB,GAAAuC,OAC3Cb,EAAWtB,QAAO,aAAA,GAAAmC,OAClBb,EAAWtB,QAAO,cAE3BoB,EAASQ,SAAQ,SAAAQ,GACb,IAAIC,EAAUD,EAAGE,UAGbhB,EAAWvB,YACXsC,EAAUA,EAAQE,QAAQnD,GAAW,SAAAgB,GAEjC,IAAMoC,EAAalB,EAAWpB,aAAeE,EAAImC,QAAQ,cAAe,IAAMnC,EACxEG,EAAOJ,EAAaC,EAAKkB,EAAW9B,SAAU8B,EAAW3B,OAAQ6C,GACvE,OAAOpC,EAAImC,QAAQnC,EAAKG,EAAKkC,UACjC,KAIAnB,EAAWzB,aACXwC,EAAUA,EAAQE,QAAQlD,GAAY,SAAAqD,GAClC,IAAMC,EAAWD,EAAKE,MAAM,GACtBxC,EAAG,GAAA+B,OAAMb,EAAWtB,QAAO,KAAAmC,OAAIQ,GAE/BE,EAAcvB,EAAWrB,eAAiB0C,EAAWD,EACrDnC,EAAOJ,EAAaC,EAAKkB,EAAW7B,UAAW6B,EAAW3B,OAAQkD,GACxE,OAAOH,EAAKH,QAAQG,EAAMnC,EAAKkC,UACnC,KAIAnB,EAAWxB,gBACXuC,EAAUA,EAAQE,QAAQjD,GAAe,SAAAwD,GACrC,IAAMC,EAAcD,EAAQF,MAAM,GAC5BxC,EAAG,GAAA+B,OAAMD,GAAcC,OAAGa,mBAAmBD,IAC7CxC,EAAOJ,EAAaC,EAAKkB,EAAW5B,aAAc4B,EAAW3B,OAAQmD,GAC3E,OAAOA,EAAQP,QAAQO,EAASvC,EAAKkC,UACzC,KAIJL,EAAGE,UAAYD,CACnB,GACJ,CAIH,CAjGA,CAiGCY,QAGEA,OAAOC,QACN,SAAUC,EAAGrC,GAOVqC,EAAEC,GAAGtC,YAAc,SAAUE,GACzB,OALJ,SAAwBoB,EAAIpB,GACxBF,EAAYsB,EAAIpB,EACpB,CAGWqC,CAAeC,KAAKC,SAAUvC,EACzC,CACH,CAVA,CAUCkC,OAAQpC","file":"tweetParser.min.js","sourcesContent":["/*!\n * tweetParser.js v3.0.0\n * A JavaScript library that parses elements containing tweets, transforming URLs, @usernames, and #hashtags into clickable links for both x.com and twitter.com\n * License: MIT\n * Author: Vincent Loy <vincent.loy1@gmail.com>\n * http://vincent-loy.fr\n */\n\n(function (exports) {\n    'use strict';\n\n    // Constants\n    const REGEX_URL = /(?:\\s)(f|ht)tps?:\\/\\/([^\\s\\t\\r\\n<]*[^\\s\\t\\r\\n<)*_,\\.])/g; // regex for URLs\n    const REGEX_USER = /\\B@([a-zA-Z0-9_]+)/g; // regex for @usernames\n    const REGEX_HASHTAG = /\\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g; // regex for #hashtags\n\n    // Default parameters\n    const DEFAULT_OPTIONS = {\n        urlClass: 'tweet_link',\n        userClass: 'tweet_user',\n        hashtagClass: 'hashtag',\n        target: '_blank',\n        searchWithHashtags: true,\n        parseUsers: true,\n        parseHashtags: true,\n        parseUrls: true,\n        baseURL: 'https://x.com', // Default domain for links\n        hideUserSymbol: false, // New: Hide \"@\" in @username\n        hideProtocol: false // New: Hide \"https://\" or \"http://\" in displayed text for URLs\n    };\n\n    // Helper function to extend objects (shallow copy)\n    const extend = (out = {}, ...args) => {\n        args.forEach(arg => {\n            if (arg) {\n                Object.keys(arg).forEach(key => {\n                    out[key] = arg[key];\n                });\n            }\n        });\n        return out;\n    };\n\n    // Helper function to generate a link element\n    const generateLink = (url, className, target, text) => {\n        const link = document.createElement('a');\n        link.href = url; // Keep the full URL with protocol in the href\n        link.classList.add(className);\n        link.target = target;\n        link.textContent = text; // Display text (can have protocol hidden if specified)\n        return link;\n    };\n\n    // Main tweetParser function\n    const tweetParser = (element, options = {}) => {\n        const elements = document.querySelectorAll(element);\n        const parameters = extend({}, DEFAULT_OPTIONS, options);\n\n        // Define hashtag search URL based on baseURL\n        const hashtagBaseURL = parameters.searchWithHashtags \n            ? `${parameters.baseURL}/hashtag/`\n            : `${parameters.baseURL}/search?q=`;\n\n        elements.forEach(el => {\n            let content = el.innerHTML;\n\n            // Replace URLs with links\n            if (parameters.parseUrls) {\n                content = content.replace(REGEX_URL, url => {\n                    // If hideProtocol is true, remove protocol from displayed text\n                    const displayUrl = parameters.hideProtocol ? url.replace(/https?:\\/\\//, '') : url;\n                    const link = generateLink(url, parameters.urlClass, parameters.target, displayUrl);\n                    return url.replace(url, link.outerHTML);\n                });\n            }\n\n            // Replace @usernames with links, optionally hiding the @ symbol\n            if (parameters.parseUsers) {\n                content = content.replace(REGEX_USER, user => {\n                    const userOnly = user.slice(1);\n                    const url = `${parameters.baseURL}/${userOnly}`;\n                    // If hideUserSymbol is true, display username without the @ symbol\n                    const displayUser = parameters.hideUserSymbol ? userOnly : user;\n                    const link = generateLink(url, parameters.userClass, parameters.target, displayUser);\n                    return user.replace(user, link.outerHTML);\n                });\n            }\n\n            // Replace #hashtags with links\n            if (parameters.parseHashtags) {\n                content = content.replace(REGEX_HASHTAG, hashtag => {\n                    const hashtagOnly = hashtag.slice(1);\n                    const url = `${hashtagBaseURL}${encodeURIComponent(hashtagOnly)}`;\n                    const link = generateLink(url, parameters.hashtagClass, parameters.target, hashtag);\n                    return hashtag.replace(hashtag, link.outerHTML);\n                });\n            }\n\n            // Update the element's HTML with parsed content\n            el.innerHTML = content;\n        });\n    };\n\n    exports.tweetParser = tweetParser;\n\n}(window));\n\n/*global $, jQuery, tweetParser*/\nif (window.jQuery) {\n    (function ($, tweetParser) {\n        'use strict';\n\n        function tweetParserify(el, options) {\n            tweetParser(el, options);\n        }\n\n        $.fn.tweetParser = function (options) {\n            return tweetParserify(this.selector, options);\n        };\n    }(jQuery, tweetParser));\n}\n"]}